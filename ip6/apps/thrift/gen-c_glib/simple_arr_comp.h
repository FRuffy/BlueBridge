/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SIMPLE_ARR_COMP_H
#define SIMPLE_ARR_COMP_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "simple_arr_comp_types.h"

/* SimpleArrComp service interface */
typedef struct _SimpleArrCompIf SimpleArrCompIf;  /* dummy object */

struct _SimpleArrCompIfInterface
{
  GTypeInterface parent;

  gboolean (*increment_array) (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * arr, const gint8 value, const gint32 length, CallException ** ouch, GError **error);
  gboolean (*add_arrays) (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * array1, const GByteArray * array2, const gint32 length, CallException ** ouch, GError **error);
  gboolean (*mat_multiply) (SimpleArrCompIf *iface, const GByteArray * array, const GByteArray * matrix, const gint32 length, const tuple * dimension, const GByteArray * result_ptr, CallException ** ouch, GError **error);
  gboolean (*word_count) (SimpleArrCompIf *iface, gint32* _return, const GByteArray * story, const gint32 length, CallException ** ouch, GError **error);
  gboolean (*sort_array) (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * num_array, const gint32 length, CallException ** ouch, GError **error);
  gboolean (*no_op) (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * num_array, const gint32 length, GError **error);
};
typedef struct _SimpleArrCompIfInterface SimpleArrCompIfInterface;

GType simple_arr_comp_if_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_IF (simple_arr_comp_if_get_type())
#define SIMPLE_ARR_COMP_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_IF, SimpleArrCompIf))
#define IS_SIMPLE_ARR_COMP_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_IF))
#define SIMPLE_ARR_COMP_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_SIMPLE_ARR_COMP_IF, SimpleArrCompIfInterface))

gboolean simple_arr_comp_if_increment_array (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * arr, const gint8 value, const gint32 length, CallException ** ouch, GError **error);
gboolean simple_arr_comp_if_add_arrays (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * array1, const GByteArray * array2, const gint32 length, CallException ** ouch, GError **error);
gboolean simple_arr_comp_if_mat_multiply (SimpleArrCompIf *iface, const GByteArray * array, const GByteArray * matrix, const gint32 length, const tuple * dimension, const GByteArray * result_ptr, CallException ** ouch, GError **error);
gboolean simple_arr_comp_if_word_count (SimpleArrCompIf *iface, gint32* _return, const GByteArray * story, const gint32 length, CallException ** ouch, GError **error);
gboolean simple_arr_comp_if_sort_array (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * num_array, const gint32 length, CallException ** ouch, GError **error);
gboolean simple_arr_comp_if_no_op (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * num_array, const gint32 length, GError **error);

/* SimpleArrComp service client */
struct _SimpleArrCompClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _SimpleArrCompClient SimpleArrCompClient;

struct _SimpleArrCompClientClass
{
  GObjectClass parent;
};
typedef struct _SimpleArrCompClientClass SimpleArrCompClientClass;

GType simple_arr_comp_client_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_CLIENT (simple_arr_comp_client_get_type())
#define SIMPLE_ARR_COMP_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_CLIENT, SimpleArrCompClient))
#define SIMPLE_ARR_COMP_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SIMPLE_ARR_COMP_CLIENT, SimpleArrCompClientClass))
#define SIMPLE_ARR_COMP_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_CLIENT))
#define SIMPLE_ARR_COMP_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_CLIENT))
#define SIMPLE_ARR_COMP_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_CLIENT, SimpleArrCompClientClass))

gboolean simple_arr_comp_client_increment_array (SimpleArrCompIf * iface, GByteArray ** _return, const GByteArray * arr, const gint8 value, const gint32 length, CallException ** ouch, GError ** error);
gboolean simple_arr_comp_client_send_increment_array (SimpleArrCompIf * iface, const GByteArray * arr, const gint8 value, const gint32 length, GError ** error);
gboolean simple_arr_comp_client_recv_increment_array (SimpleArrCompIf * iface, GByteArray ** _return, CallException ** ouch, GError ** error);
gboolean simple_arr_comp_client_add_arrays (SimpleArrCompIf * iface, GByteArray ** _return, const GByteArray * array1, const GByteArray * array2, const gint32 length, CallException ** ouch, GError ** error);
gboolean simple_arr_comp_client_send_add_arrays (SimpleArrCompIf * iface, const GByteArray * array1, const GByteArray * array2, const gint32 length, GError ** error);
gboolean simple_arr_comp_client_recv_add_arrays (SimpleArrCompIf * iface, GByteArray ** _return, CallException ** ouch, GError ** error);
gboolean simple_arr_comp_client_mat_multiply (SimpleArrCompIf * iface, const GByteArray * array, const GByteArray * matrix, const gint32 length, const tuple * dimension, const GByteArray * result_ptr, CallException ** ouch, GError ** error);
gboolean simple_arr_comp_client_send_mat_multiply (SimpleArrCompIf * iface, const GByteArray * array, const GByteArray * matrix, const gint32 length, const tuple * dimension, const GByteArray * result_ptr, GError ** error);
gboolean simple_arr_comp_client_recv_mat_multiply (SimpleArrCompIf * iface, CallException ** ouch, GError ** error);
gboolean simple_arr_comp_client_word_count (SimpleArrCompIf * iface, gint32* _return, const GByteArray * story, const gint32 length, CallException ** ouch, GError ** error);
gboolean simple_arr_comp_client_send_word_count (SimpleArrCompIf * iface, const GByteArray * story, const gint32 length, GError ** error);
gboolean simple_arr_comp_client_recv_word_count (SimpleArrCompIf * iface, gint32* _return, CallException ** ouch, GError ** error);
gboolean simple_arr_comp_client_sort_array (SimpleArrCompIf * iface, GByteArray ** _return, const GByteArray * num_array, const gint32 length, CallException ** ouch, GError ** error);
gboolean simple_arr_comp_client_send_sort_array (SimpleArrCompIf * iface, const GByteArray * num_array, const gint32 length, GError ** error);
gboolean simple_arr_comp_client_recv_sort_array (SimpleArrCompIf * iface, GByteArray ** _return, CallException ** ouch, GError ** error);
gboolean simple_arr_comp_client_no_op (SimpleArrCompIf * iface, GByteArray ** _return, const GByteArray * num_array, const gint32 length, GError ** error);
gboolean simple_arr_comp_client_send_no_op (SimpleArrCompIf * iface, const GByteArray * num_array, const gint32 length, GError ** error);
gboolean simple_arr_comp_client_recv_no_op (SimpleArrCompIf * iface, GByteArray ** _return, GError ** error);
void simple_arr_comp_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void simple_arr_comp_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* SimpleArrComp handler (abstract base class) */
struct _SimpleArrCompHandler
{
  GObject parent;
};
typedef struct _SimpleArrCompHandler SimpleArrCompHandler;

struct _SimpleArrCompHandlerClass
{
  GObjectClass parent;

  gboolean (*increment_array) (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * arr, const gint8 value, const gint32 length, CallException ** ouch, GError **error);
  gboolean (*add_arrays) (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * array1, const GByteArray * array2, const gint32 length, CallException ** ouch, GError **error);
  gboolean (*mat_multiply) (SimpleArrCompIf *iface, const GByteArray * array, const GByteArray * matrix, const gint32 length, const tuple * dimension, const GByteArray * result_ptr, CallException ** ouch, GError **error);
  gboolean (*word_count) (SimpleArrCompIf *iface, gint32* _return, const GByteArray * story, const gint32 length, CallException ** ouch, GError **error);
  gboolean (*sort_array) (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * num_array, const gint32 length, CallException ** ouch, GError **error);
  gboolean (*no_op) (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * num_array, const gint32 length, GError **error);
};
typedef struct _SimpleArrCompHandlerClass SimpleArrCompHandlerClass;

GType simple_arr_comp_handler_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_HANDLER (simple_arr_comp_handler_get_type())
#define SIMPLE_ARR_COMP_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_HANDLER, SimpleArrCompHandler))
#define IS_SIMPLE_ARR_COMP_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_HANDLER))
#define SIMPLE_ARR_COMP_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SIMPLE_ARR_COMP_HANDLER, SimpleArrCompHandlerClass))
#define IS_SIMPLE_ARR_COMP_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_HANDLER))
#define SIMPLE_ARR_COMP_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_HANDLER, SimpleArrCompHandlerClass))

gboolean simple_arr_comp_handler_increment_array (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * arr, const gint8 value, const gint32 length, CallException ** ouch, GError **error);
gboolean simple_arr_comp_handler_add_arrays (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * array1, const GByteArray * array2, const gint32 length, CallException ** ouch, GError **error);
gboolean simple_arr_comp_handler_mat_multiply (SimpleArrCompIf *iface, const GByteArray * array, const GByteArray * matrix, const gint32 length, const tuple * dimension, const GByteArray * result_ptr, CallException ** ouch, GError **error);
gboolean simple_arr_comp_handler_word_count (SimpleArrCompIf *iface, gint32* _return, const GByteArray * story, const gint32 length, CallException ** ouch, GError **error);
gboolean simple_arr_comp_handler_sort_array (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * num_array, const gint32 length, CallException ** ouch, GError **error);
gboolean simple_arr_comp_handler_no_op (SimpleArrCompIf *iface, GByteArray ** _return, const GByteArray * num_array, const gint32 length, GError **error);

/* SimpleArrComp processor */
struct _SimpleArrCompProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  SimpleArrCompHandler *handler;
  GHashTable *process_map;
};
typedef struct _SimpleArrCompProcessor SimpleArrCompProcessor;

struct _SimpleArrCompProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _SimpleArrCompProcessorClass SimpleArrCompProcessorClass;

GType simple_arr_comp_processor_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_PROCESSOR (simple_arr_comp_processor_get_type())
#define SIMPLE_ARR_COMP_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_PROCESSOR, SimpleArrCompProcessor))
#define IS_SIMPLE_ARR_COMP_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_PROCESSOR))
#define SIMPLE_ARR_COMP_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SIMPLE_ARR_COMP_PROCESSOR, SimpleArrCompProcessorClass))
#define IS_SIMPLE_ARR_COMP_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_PROCESSOR))
#define SIMPLE_ARR_COMP_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_PROCESSOR, SimpleArrCompProcessorClass))

#endif /* SIMPLE_ARR_COMP_H */
