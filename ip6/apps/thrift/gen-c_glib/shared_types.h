/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SHARED_TYPES_H
#define SHARED_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>

/* custom thrift includes */

/* begin types */

struct _CallException
{ 
  ThriftStruct parent; 

  /* public */
  gint32 err_code;
  gboolean __isset_err_code;
  gchar * message;
  gboolean __isset_message;
};
typedef struct _CallException CallException;

struct _CallExceptionClass
{
  ThriftStructClass parent;
};
typedef struct _CallExceptionClass CallExceptionClass;

GType call_exception_get_type (void);
#define TYPE_CALL_EXCEPTION (call_exception_get_type())
#define CALL_EXCEPTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CALL_EXCEPTION, CallException))
#define CALL_EXCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CALL_EXCEPTION, CallExceptionClass))
#define IS_CALL_EXCEPTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CALL_EXCEPTION))
#define IS_CALL_EXCEPTION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CALL_EXCEPTION))
#define CALL_EXCEPTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CALL_EXCEPTION, CallExceptionClass))

/* exception */
typedef enum
{
  CALL_EXCEPTION_ERROR_CODE,
} CallExceptionError;

GQuark call_exception_error_quark (void);
#define CALL_EXCEPTION_ERROR (call_exception_error_quark())


/* constants */

#endif /* SHARED_TYPES_H */
