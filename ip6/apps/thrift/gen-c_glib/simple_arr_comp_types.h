/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SIMPLE_ARR_COMP_TYPES_H
#define SIMPLE_ARR_COMP_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* other thrift includes */
#include "shared_types.h"

/* custom thrift includes */

/* begin types */

/* struct tuple */
struct _tuple
{ 
  ThriftStruct parent; 

  /* public */
  gint32 n;
  gboolean __isset_n;
  gint32 m;
  gboolean __isset_m;
};
typedef struct _tuple tuple;

struct _tupleClass
{
  ThriftStructClass parent;
};
typedef struct _tupleClass tupleClass;

GType tuple_get_type (void);
#define TYPE_TUPLE (tuple_get_type())
#define TUPLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TUPLE, tuple))
#define TUPLE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_TUPLE, tupleClass))
#define IS_TUPLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TUPLE))
#define IS_TUPLE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_TUPLE))
#define TUPLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TUPLE, tupleClass))

/* constants */

/* struct SimpleArrCompIncrementArrayArgs */
struct _SimpleArrCompIncrementArrayArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * arr;
  gboolean __isset_arr;
  gint8 value;
  gboolean __isset_value;
  gint32 length;
  gboolean __isset_length;
};
typedef struct _SimpleArrCompIncrementArrayArgs SimpleArrCompIncrementArrayArgs;

struct _SimpleArrCompIncrementArrayArgsClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompIncrementArrayArgsClass SimpleArrCompIncrementArrayArgsClass;

GType simple_arr_comp_increment_array_args_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_ARGS (simple_arr_comp_increment_array_args_get_type())
#define SIMPLE_ARR_COMP_INCREMENT_ARRAY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_ARGS, SimpleArrCompIncrementArrayArgs))
#define SIMPLE_ARR_COMP_INCREMENT_ARRAY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_ARGS, SimpleArrCompIncrementArrayArgsClass))
#define IS_SIMPLE_ARR_COMP_INCREMENT_ARRAY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_ARGS))
#define IS_SIMPLE_ARR_COMP_INCREMENT_ARRAY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_ARGS))
#define SIMPLE_ARR_COMP_INCREMENT_ARRAY_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_ARGS, SimpleArrCompIncrementArrayArgsClass))

/* struct SimpleArrCompIncrementArrayResult */
struct _SimpleArrCompIncrementArrayResult
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * success;
  gboolean __isset_success;
  CallException * ouch;
  gboolean __isset_ouch;
};
typedef struct _SimpleArrCompIncrementArrayResult SimpleArrCompIncrementArrayResult;

struct _SimpleArrCompIncrementArrayResultClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompIncrementArrayResultClass SimpleArrCompIncrementArrayResultClass;

GType simple_arr_comp_increment_array_result_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_RESULT (simple_arr_comp_increment_array_result_get_type())
#define SIMPLE_ARR_COMP_INCREMENT_ARRAY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_RESULT, SimpleArrCompIncrementArrayResult))
#define SIMPLE_ARR_COMP_INCREMENT_ARRAY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_RESULT, SimpleArrCompIncrementArrayResultClass))
#define IS_SIMPLE_ARR_COMP_INCREMENT_ARRAY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_RESULT))
#define IS_SIMPLE_ARR_COMP_INCREMENT_ARRAY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_RESULT))
#define SIMPLE_ARR_COMP_INCREMENT_ARRAY_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_INCREMENT_ARRAY_RESULT, SimpleArrCompIncrementArrayResultClass))

/* struct SimpleArrCompAddArraysArgs */
struct _SimpleArrCompAddArraysArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * array1;
  gboolean __isset_array1;
  GByteArray * array2;
  gboolean __isset_array2;
  gint32 length;
  gboolean __isset_length;
};
typedef struct _SimpleArrCompAddArraysArgs SimpleArrCompAddArraysArgs;

struct _SimpleArrCompAddArraysArgsClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompAddArraysArgsClass SimpleArrCompAddArraysArgsClass;

GType simple_arr_comp_add_arrays_args_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_ARGS (simple_arr_comp_add_arrays_args_get_type())
#define SIMPLE_ARR_COMP_ADD_ARRAYS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_ARGS, SimpleArrCompAddArraysArgs))
#define SIMPLE_ARR_COMP_ADD_ARRAYS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_ARGS, SimpleArrCompAddArraysArgsClass))
#define IS_SIMPLE_ARR_COMP_ADD_ARRAYS_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_ARGS))
#define IS_SIMPLE_ARR_COMP_ADD_ARRAYS_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_ARGS))
#define SIMPLE_ARR_COMP_ADD_ARRAYS_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_ARGS, SimpleArrCompAddArraysArgsClass))

/* struct SimpleArrCompAddArraysResult */
struct _SimpleArrCompAddArraysResult
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * success;
  gboolean __isset_success;
  CallException * ouch;
  gboolean __isset_ouch;
};
typedef struct _SimpleArrCompAddArraysResult SimpleArrCompAddArraysResult;

struct _SimpleArrCompAddArraysResultClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompAddArraysResultClass SimpleArrCompAddArraysResultClass;

GType simple_arr_comp_add_arrays_result_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_RESULT (simple_arr_comp_add_arrays_result_get_type())
#define SIMPLE_ARR_COMP_ADD_ARRAYS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_RESULT, SimpleArrCompAddArraysResult))
#define SIMPLE_ARR_COMP_ADD_ARRAYS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_RESULT, SimpleArrCompAddArraysResultClass))
#define IS_SIMPLE_ARR_COMP_ADD_ARRAYS_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_RESULT))
#define IS_SIMPLE_ARR_COMP_ADD_ARRAYS_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_RESULT))
#define SIMPLE_ARR_COMP_ADD_ARRAYS_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_ADD_ARRAYS_RESULT, SimpleArrCompAddArraysResultClass))

/* struct SimpleArrCompMatMultiplyArgs */
struct _SimpleArrCompMatMultiplyArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * array;
  gboolean __isset_array;
  GByteArray * matrix;
  gboolean __isset_matrix;
  gint32 length;
  gboolean __isset_length;
  tuple * dimension;
  gboolean __isset_dimension;
  GByteArray * result_ptr;
  gboolean __isset_result_ptr;
};
typedef struct _SimpleArrCompMatMultiplyArgs SimpleArrCompMatMultiplyArgs;

struct _SimpleArrCompMatMultiplyArgsClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompMatMultiplyArgsClass SimpleArrCompMatMultiplyArgsClass;

GType simple_arr_comp_mat_multiply_args_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_ARGS (simple_arr_comp_mat_multiply_args_get_type())
#define SIMPLE_ARR_COMP_MAT_MULTIPLY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_ARGS, SimpleArrCompMatMultiplyArgs))
#define SIMPLE_ARR_COMP_MAT_MULTIPLY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_ARGS, SimpleArrCompMatMultiplyArgsClass))
#define IS_SIMPLE_ARR_COMP_MAT_MULTIPLY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_ARGS))
#define IS_SIMPLE_ARR_COMP_MAT_MULTIPLY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_ARGS))
#define SIMPLE_ARR_COMP_MAT_MULTIPLY_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_ARGS, SimpleArrCompMatMultiplyArgsClass))

/* struct SimpleArrCompMatMultiplyResult */
struct _SimpleArrCompMatMultiplyResult
{ 
  ThriftStruct parent; 

  /* public */
  CallException * ouch;
  gboolean __isset_ouch;
};
typedef struct _SimpleArrCompMatMultiplyResult SimpleArrCompMatMultiplyResult;

struct _SimpleArrCompMatMultiplyResultClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompMatMultiplyResultClass SimpleArrCompMatMultiplyResultClass;

GType simple_arr_comp_mat_multiply_result_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_RESULT (simple_arr_comp_mat_multiply_result_get_type())
#define SIMPLE_ARR_COMP_MAT_MULTIPLY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_RESULT, SimpleArrCompMatMultiplyResult))
#define SIMPLE_ARR_COMP_MAT_MULTIPLY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_RESULT, SimpleArrCompMatMultiplyResultClass))
#define IS_SIMPLE_ARR_COMP_MAT_MULTIPLY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_RESULT))
#define IS_SIMPLE_ARR_COMP_MAT_MULTIPLY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_RESULT))
#define SIMPLE_ARR_COMP_MAT_MULTIPLY_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_MAT_MULTIPLY_RESULT, SimpleArrCompMatMultiplyResultClass))

/* struct SimpleArrCompWordCountArgs */
struct _SimpleArrCompWordCountArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * story;
  gboolean __isset_story;
  gint32 length;
  gboolean __isset_length;
};
typedef struct _SimpleArrCompWordCountArgs SimpleArrCompWordCountArgs;

struct _SimpleArrCompWordCountArgsClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompWordCountArgsClass SimpleArrCompWordCountArgsClass;

GType simple_arr_comp_word_count_args_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_WORD_COUNT_ARGS (simple_arr_comp_word_count_args_get_type())
#define SIMPLE_ARR_COMP_WORD_COUNT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_WORD_COUNT_ARGS, SimpleArrCompWordCountArgs))
#define SIMPLE_ARR_COMP_WORD_COUNT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_WORD_COUNT_ARGS, SimpleArrCompWordCountArgsClass))
#define IS_SIMPLE_ARR_COMP_WORD_COUNT_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_WORD_COUNT_ARGS))
#define IS_SIMPLE_ARR_COMP_WORD_COUNT_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_WORD_COUNT_ARGS))
#define SIMPLE_ARR_COMP_WORD_COUNT_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_WORD_COUNT_ARGS, SimpleArrCompWordCountArgsClass))

/* struct SimpleArrCompWordCountResult */
struct _SimpleArrCompWordCountResult
{ 
  ThriftStruct parent; 

  /* public */
  gint32 success;
  gboolean __isset_success;
  CallException * ouch;
  gboolean __isset_ouch;
};
typedef struct _SimpleArrCompWordCountResult SimpleArrCompWordCountResult;

struct _SimpleArrCompWordCountResultClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompWordCountResultClass SimpleArrCompWordCountResultClass;

GType simple_arr_comp_word_count_result_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_WORD_COUNT_RESULT (simple_arr_comp_word_count_result_get_type())
#define SIMPLE_ARR_COMP_WORD_COUNT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_WORD_COUNT_RESULT, SimpleArrCompWordCountResult))
#define SIMPLE_ARR_COMP_WORD_COUNT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_WORD_COUNT_RESULT, SimpleArrCompWordCountResultClass))
#define IS_SIMPLE_ARR_COMP_WORD_COUNT_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_WORD_COUNT_RESULT))
#define IS_SIMPLE_ARR_COMP_WORD_COUNT_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_WORD_COUNT_RESULT))
#define SIMPLE_ARR_COMP_WORD_COUNT_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_WORD_COUNT_RESULT, SimpleArrCompWordCountResultClass))

/* struct SimpleArrCompSortArrayArgs */
struct _SimpleArrCompSortArrayArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * num_array;
  gboolean __isset_num_array;
  gint32 length;
  gboolean __isset_length;
};
typedef struct _SimpleArrCompSortArrayArgs SimpleArrCompSortArrayArgs;

struct _SimpleArrCompSortArrayArgsClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompSortArrayArgsClass SimpleArrCompSortArrayArgsClass;

GType simple_arr_comp_sort_array_args_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_ARGS (simple_arr_comp_sort_array_args_get_type())
#define SIMPLE_ARR_COMP_SORT_ARRAY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_ARGS, SimpleArrCompSortArrayArgs))
#define SIMPLE_ARR_COMP_SORT_ARRAY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_ARGS, SimpleArrCompSortArrayArgsClass))
#define IS_SIMPLE_ARR_COMP_SORT_ARRAY_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_ARGS))
#define IS_SIMPLE_ARR_COMP_SORT_ARRAY_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_ARGS))
#define SIMPLE_ARR_COMP_SORT_ARRAY_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_ARGS, SimpleArrCompSortArrayArgsClass))

/* struct SimpleArrCompSortArrayResult */
struct _SimpleArrCompSortArrayResult
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * success;
  gboolean __isset_success;
  CallException * ouch;
  gboolean __isset_ouch;
};
typedef struct _SimpleArrCompSortArrayResult SimpleArrCompSortArrayResult;

struct _SimpleArrCompSortArrayResultClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompSortArrayResultClass SimpleArrCompSortArrayResultClass;

GType simple_arr_comp_sort_array_result_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_RESULT (simple_arr_comp_sort_array_result_get_type())
#define SIMPLE_ARR_COMP_SORT_ARRAY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_RESULT, SimpleArrCompSortArrayResult))
#define SIMPLE_ARR_COMP_SORT_ARRAY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_RESULT, SimpleArrCompSortArrayResultClass))
#define IS_SIMPLE_ARR_COMP_SORT_ARRAY_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_RESULT))
#define IS_SIMPLE_ARR_COMP_SORT_ARRAY_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_RESULT))
#define SIMPLE_ARR_COMP_SORT_ARRAY_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_SORT_ARRAY_RESULT, SimpleArrCompSortArrayResultClass))

/* struct SimpleArrCompNoOpArgs */
struct _SimpleArrCompNoOpArgs
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * num_array;
  gboolean __isset_num_array;
  gint32 length;
  gboolean __isset_length;
};
typedef struct _SimpleArrCompNoOpArgs SimpleArrCompNoOpArgs;

struct _SimpleArrCompNoOpArgsClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompNoOpArgsClass SimpleArrCompNoOpArgsClass;

GType simple_arr_comp_no_op_args_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_NO_OP_ARGS (simple_arr_comp_no_op_args_get_type())
#define SIMPLE_ARR_COMP_NO_OP_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_NO_OP_ARGS, SimpleArrCompNoOpArgs))
#define SIMPLE_ARR_COMP_NO_OP_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_NO_OP_ARGS, SimpleArrCompNoOpArgsClass))
#define IS_SIMPLE_ARR_COMP_NO_OP_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_NO_OP_ARGS))
#define IS_SIMPLE_ARR_COMP_NO_OP_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_NO_OP_ARGS))
#define SIMPLE_ARR_COMP_NO_OP_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_NO_OP_ARGS, SimpleArrCompNoOpArgsClass))

/* struct SimpleArrCompNoOpResult */
struct _SimpleArrCompNoOpResult
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * success;
  gboolean __isset_success;
};
typedef struct _SimpleArrCompNoOpResult SimpleArrCompNoOpResult;

struct _SimpleArrCompNoOpResultClass
{
  ThriftStructClass parent;
};
typedef struct _SimpleArrCompNoOpResultClass SimpleArrCompNoOpResultClass;

GType simple_arr_comp_no_op_result_get_type (void);
#define TYPE_SIMPLE_ARR_COMP_NO_OP_RESULT (simple_arr_comp_no_op_result_get_type())
#define SIMPLE_ARR_COMP_NO_OP_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_ARR_COMP_NO_OP_RESULT, SimpleArrCompNoOpResult))
#define SIMPLE_ARR_COMP_NO_OP_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SIMPLE_ARR_COMP_NO_OP_RESULT, SimpleArrCompNoOpResultClass))
#define IS_SIMPLE_ARR_COMP_NO_OP_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_ARR_COMP_NO_OP_RESULT))
#define IS_SIMPLE_ARR_COMP_NO_OP_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SIMPLE_ARR_COMP_NO_OP_RESULT))
#define SIMPLE_ARR_COMP_NO_OP_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_ARR_COMP_NO_OP_RESULT, SimpleArrCompNoOpResultClass))

#endif /* SIMPLE_ARR_COMP_TYPES_H */
