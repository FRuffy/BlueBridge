!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLOCK_SIZE	disk.h	10;"	d
BLOCK_SIZE	mem.h	10;"	d
BLOCK_SIZE	rmem.h	10;"	d
DISK_H	disk.h	8;"	d
PAGE_SIZE	page_table.h	17;"	d
PAGE_TABLE_H	page_table.h	2;"	d
RMEM_H	rmem.h	8;"	d
_GNU_SOURCE	page_table.c	1;"	d	file:
block_size	disk.c	/^	int block_size;$/;"	m	struct:disk	file:
block_size	mem.c	/^    int block_size;$/;"	m	struct:mem	file:
block_size	rmem.c	/^    int block_size;$/;"	m	struct:rmem	file:
clean_page_table	page_table.c	/^void clean_page_table(struct page_table *pt) {$/;"	f
configure_rmem	rmem.c	/^void configure_rmem(char *filename) {$/;"	f
disk	disk.c	/^struct disk {$/;"	s	file:
disk	page_table.c	/^struct disk* disk;$/;"	v	typeref:struct:disk
disk_close	disk.c	/^void disk_close( struct disk *d ) {$/;"	f
disk_nblocks	disk.c	/^int disk_nblocks( struct disk *d ) {$/;"	f
disk_open	disk.c	/^struct disk *disk_open( const char *diskname, int nblocks ) {$/;"	f
disk_read	disk.c	/^void disk_read( struct disk *d, int block, char *data ) {$/;"	f
disk_write	disk.c	/^void disk_write( struct disk *d, int block, const char *data ) {$/;"	f
fd	disk.c	/^	int fd;$/;"	m	struct:disk	file:
fd	page_table.h	/^    int fd;$/;"	m	struct:page_table
fill_mem	mem.c	/^void fill_mem(struct mem *r) {$/;"	f
fill_rmem	rmem.c	/^void fill_rmem(struct rmem *r) {$/;"	f
framePage	page_table.c	/^int* framePage; \/\/ keeps track of which page is in a frame$/;"	v
frameState	page_table.c	/^int* frameState; \/\/ keeps track of how long a page has been in a frame$/;"	v
handler	page_table.h	/^    page_fault_handler_t handler;$/;"	m	struct:page_table
init_virtual_memory	page_table.c	/^struct page_table *init_virtual_memory(int npages, int nframes, const char* system) {$/;"	f
internal_fault_handler	page_table.c	/^static void internal_fault_handler( int signum, siginfo_t *info, void *context ) {$/;"	f	file:
mem	mem.c	/^struct mem {$/;"	s	file:
mem	page_table.c	/^struct mem* mem;$/;"	v	typeref:struct:mem
memList	mem.c	/^    struct u_int8 **memList;$/;"	m	struct:mem	typeref:struct:mem::u_int8	file:
memList	rmem.c	/^    struct in6_memaddr *memList;$/;"	m	struct:rmem	typeref:struct:rmem::in6_memaddr	file:
mem_H	mem.h	8;"	d
mem_allocate	mem.c	/^struct mem *mem_allocate(int nblocks) {$/;"	f
mem_blocks	mem.c	/^int mem_blocks(struct mem *r) {$/;"	f
mem_deallocate	mem.c	/^void mem_deallocate(struct mem *r) {$/;"	f
mem_read	mem.c	/^void mem_read(struct mem *r, int block, char *data) {$/;"	f
mem_write	mem.c	/^void mem_write(struct mem *r, int block, char *data) {$/;"	f
myConf	rmem.c	/^struct config myConf;$/;"	v	typeref:struct:config
nblocks	disk.c	/^	int nblocks;$/;"	m	struct:disk	file:
nblocks	mem.c	/^    int nblocks;$/;"	m	struct:mem	file:
nblocks	rmem.c	/^    int nblocks;$/;"	m	struct:rmem	file:
nframes	page_table.h	/^    int nframes;$/;"	m	struct:page_table
npages	page_table.h	/^    int npages;$/;"	m	struct:page_table
pageFaults	page_table.c	/^int pageFaults = 0;$/;"	v
pageReads	page_table.c	/^int pageReads = 0;$/;"	v
pageWrites	page_table.c	/^int pageWrites = 0;$/;"	v
page_bits	page_table.h	/^    int *page_bits;$/;"	m	struct:page_table
page_fault_handler_disk	page_table.c	/^void page_fault_handler_disk( struct page_table *pt, int page) {$/;"	f
page_fault_handler_mem	page_table.c	/^void page_fault_handler_mem( struct page_table *pt, int page ) {$/;"	f
page_fault_handler_rmem	page_table.c	/^void page_fault_handler_rmem( struct page_table *pt, int page ) {$/;"	f
page_fault_handler_t	page_table.h	/^typedef void (*page_fault_handler_t) ( struct page_table *pt, int page );$/;"	t
page_mapping	page_table.h	/^    int *page_mapping;$/;"	m	struct:page_table
page_table	page_table.h	/^struct page_table {$/;"	s
page_table_create	page_table.c	/^struct page_table *page_table_create( int npages, int nframes, page_fault_handler_t handler ) {$/;"	f
page_table_delete	page_table.c	/^void page_table_delete(struct page_table *pt) {$/;"	f
page_table_flush	page_table.c	/^void page_table_flush(struct page_table *pt) {$/;"	f
page_table_get_entry	page_table.c	/^void page_table_get_entry( struct page_table *pt, int page, int *frame, int *bits ) {$/;"	f
page_table_get_nframes	page_table.c	/^int page_table_get_nframes( struct page_table *pt ) {$/;"	f
page_table_get_npages	page_table.c	/^int page_table_get_npages( struct page_table *pt ) {$/;"	f
page_table_get_physmem	page_table.c	/^char * page_table_get_physmem( struct page_table *pt ) {$/;"	f
page_table_get_virtmem	page_table.c	/^char * page_table_get_virtmem( struct page_table *pt ) {$/;"	f
page_table_print	page_table.c	/^void page_table_print( struct page_table *pt ) {$/;"	f
page_table_print_entry	page_table.c	/^void page_table_print_entry( struct page_table *pt, int page ) {$/;"	f
page_table_set_entry	page_table.c	/^void page_table_set_entry(struct page_table *pt, int page, int frame, int bits ) {$/;"	f
pagingSystem	page_table.c	/^const char* pagingSystem;$/;"	v
physmem	page_table.c	/^char* physmem;$/;"	v
physmem	page_table.h	/^    char *physmem;$/;"	m	struct:page_table
print_page_faults	page_table.c	/^void print_page_faults() {$/;"	f
rmem	page_table.c	/^struct rmem* rmem;$/;"	v	typeref:struct:rmem
rmem	rmem.c	/^struct rmem {$/;"	s	file:
rmem_allocate	rmem.c	/^struct rmem *rmem_allocate(int nblocks) {$/;"	f
rmem_blocks	rmem.c	/^int rmem_blocks(struct rmem *r) {$/;"	f
rmem_deallocate	rmem.c	/^void rmem_deallocate(struct rmem *r) {$/;"	f
rmem_init_sockets	rmem.c	/^void rmem_init_sockets(struct rmem *r) {$/;"	f
rmem_read	rmem.c	/^void rmem_read( struct rmem *r, int block, char *data ) {$/;"	f
rmem_write	rmem.c	/^void rmem_write(struct rmem *r, int block, char *data ) {$/;"	f
set_vmem_config	page_table.c	/^void set_vmem_config(char *filename) {$/;"	f
targetIP	rmem.c	/^    struct sockaddr_in6 *targetIP;$/;"	m	struct:rmem	typeref:struct:rmem::sockaddr_in6	file:
the_page_table	page_table.c	/^struct page_table *the_page_table = 0;$/;"	v	typeref:struct:page_table
virtmem	page_table.h	/^    char *virtmem;$/;"	m	struct:page_table
