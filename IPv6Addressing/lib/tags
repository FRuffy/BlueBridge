!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOC_CMD	network.h	10;"	d
BLOCKSIZE	udpcooked.h	38;"	d
BLOCK_SIZE	config.h	11;"	d
BLOCK_SIZE	vmem/disk.h	10;"	d
BLOCK_SIZE	vmem/mem.h	10;"	d
BLOCK_SIZE	vmem/rmem.h	10;"	d
CMD_SIZE	network.h	15;"	d
CONF_RING_BLOCKS	udpcooked.h	36;"	d
CONF_RING_FRAMES	udpcooked.h	35;"	d
DEBUG	utils.h	8;"	d
DELIM	config.c	94;"	d	file:
DISK_H	vmem/disk.h	8;"	d
ETH_HDRLEN	config.c	14;"	d	file:
ETH_HDRLEN	udpcooked.h	27;"	d
FRAMESIZE	udpcooked.h	37;"	d
FREE_CMD	network.h	13;"	d
GET_ADDR_CMD	network.h	14;"	d
GET_CMD	network.h	12;"	d
IP6_HDRLEN	config.c	15;"	d	file:
IP6_HDRLEN	udpcooked.h	28;"	d
IPV6_SIZE	config.h	12;"	d
IPV6_SIZE	udpcooked.h	30;"	d
KCYN	utils.h	14;"	d
KGRN	utils.h	11;"	d
KMAG	utils.h	13;"	d
KRED	utils.h	10;"	d
KYEL	utils.h	12;"	d
NUM_BLOCKS	net_client.c	54;"	d	file:
PACKET_FANOUT	udpreceive.c	135;"	d	file:
PACKET_FANOUT_HASH	udpreceive.c	136;"	d	file:
PACKET_FANOUT_LB	udpreceive.c	137;"	d	file:
PAGE_SIZE	vmem/page_table.h	17;"	d
PAGE_TABLE_H	vmem/page_table.h	2;"	d
PKT_OFFSET	udpsend.c	25;"	d	file:
POINTER_SIZE	config.h	13;"	d
PROJECT_CLIENT	client_lib.h	2;"	d
PROJECT_CONFIG	config.h	2;"	d
PROJECT_COOK	udpcooked.h	19;"	d
PROJECT_NET	network.h	2;"	d
PROJECT_SERVER	server_lib.h	2;"	d
PROJECT_UTILS	utils.h	2;"	d
RESET	utils.h	15;"	d
RETURN_ERROR	utils.h	25;"	d
RMEM_H	vmem/rmem.h	8;"	d
SEP	config.c	95;"	d	file:
SUBNET_ID	config.h	/^static const int SUBNET_ID = 1; \/\/ 16 bits for subnet id$/;"	v
UDP_HDRLEN	config.c	16;"	d	file:
UDP_HDRLEN	udpcooked.h	29;"	d
WRITE_CMD	network.h	11;"	d
_GNU_SOURCE	config.c	1;"	d	file:
_GNU_SOURCE	config.h	4;"	d
_GNU_SOURCE	net_client.c	1;"	d	file:
_GNU_SOURCE	network.c	1;"	d	file:
_GNU_SOURCE	udpreceive.c	1;"	d	file:
_GNU_SOURCE	udpsend.c	1;"	d	file:
_GNU_SOURCE	utils.c	1;"	d	file:
_GNU_SOURCE	vmem/page_table.c	1;"	d	file:
_rxring	net_client.c	/^struct _rxring {$/;"	s	file:
addchar	server_lib.c	/^int addchar(char* charadr) {$/;"	f
allocPointer	server_lib.c	/^struct in6_memaddr allocPointer; \/\/ Keep this struct global as we reaccess it many times$/;"	v	typeref:struct:in6_memaddr
allocateMem	server_lib.c	/^int allocateMem(struct sockaddr_in6 *targetIP) {$/;"	f
allocateRemoteMem	client_lib.c	/^struct in6_memaddr allocateRemoteMem(struct sockaddr_in6 *targetIP) {$/;"	f
bind_if	net_client.c	/^static int bind_if(rxring_t rx)$/;"	f	file:
block_size	vmem/disk.c	/^	int block_size;$/;"	m	struct:disk	file:
block_size	vmem/mem.c	/^    int block_size;$/;"	m	struct:mem	file:
block_size	vmem/rmem.c	/^    int block_size;$/;"	m	struct:rmem	file:
block_sz	net_client.c	/^    unsigned int block_sz;$/;"	m	struct:_rxring	file:
cancel	net_client.c	/^    sig_atomic_t cancel;$/;"	m	struct:_rxring	file:
cb	net_client.c	/^    rx_cb_t cb;$/;"	m	struct:_rxring	file:
checksum	udpsend.c	/^uint16_t checksum (uint16_t *addr, int len) {$/;"	f
cleanMemory	server_lib.c	/^int cleanMemory() {$/;"	f
clean_page_table	vmem/page_table.c	/^void clean_page_table(struct page_table *pt) {$/;"	f
client_close_rcv_socket	net_client.c	/^void client_close_rcv_socket() {$/;"	f
client_get_rcv_socket	net_client.c	/^int client_get_rcv_socket() {$/;"	f
client_my_port	net_client.c	/^int client_my_port;$/;"	v
close_epoll	udpreceive.c	/^void close_epoll() {$/;"	f
close_rcv_socket	udpreceive.c	/^void close_rcv_socket() {$/;"	f
close_send_socket	udpsend.c	/^int close_send_socket() {$/;"	f
close_sockets	network.c	/^void close_sockets() {$/;"	f
cmd	udpcooked.h	/^    uint16_t cmd;$/;"	m	struct:in6_memaddr
config	config.h	/^struct config {$/;"	s
configure_bluebridge	config.c	/^struct config configure_bluebridge(char *filename, int isServer) {$/;"	f
configure_rmem	vmem/rmem.c	/^void configure_rmem(char *filename) {$/;"	f
cooked_receive	udpreceive.c	/^int cooked_receive(char * receiveBuffer, int msgBlockSize, struct sockaddr_in6 *targetIP, struct in6_addr *ipv6Pointer){$/;"	f
cooked_send	udpsend.c	/^int cooked_send(struct in6_addr *dst_addr, int dst_port, char *data, int datalen) {$/;"	f
countchar	server_lib.c	/^int countchar = 0;$/;"	v
debug	config.h	/^    int debug;$/;"	m	struct:config
device	udpreceive.c	/^    struct sockaddr_ll device;$/;"	m	struct:ep_interface	typeref:struct:ep_interface::sockaddr_ll	file:
device	udpsend.c	/^    struct sockaddr_ll device;$/;"	m	struct:packetconfig	typeref:struct:packetconfig::sockaddr_ll	file:
disk	vmem/disk.c	/^struct disk {$/;"	s	file:
disk	vmem/page_table.c	/^struct disk* disk;$/;"	v	typeref:struct:disk
disk_close	vmem/disk.c	/^void disk_close( struct disk *d ) {$/;"	f
disk_nblocks	vmem/disk.c	/^int disk_nblocks( struct disk *d ) {$/;"	f
disk_open	vmem/disk.c	/^struct disk *disk_open( const char *diskname, int nblocks ) {$/;"	f
disk_read	vmem/disk.c	/^void disk_read( struct disk *d, int block, char *data ) {$/;"	f
disk_write	vmem/disk.c	/^void disk_write( struct disk *d, int block, const char *data ) {$/;"	f
ep_interface	udpreceive.c	/^struct ep_interface {$/;"	s	file:
epoll_fd	udpreceive.c	/^static __thread int epoll_fd = -1;$/;"	v	file:
epoll_rcv	udpreceive.c	/^int epoll_rcv(char *receiveBuffer, int msgBlockSize, struct sockaddr_in6 *targetIP, struct in6_memaddr *remoteAddr, int server) {$/;"	f
ether_frame	udpsend.c	/^    unsigned char ether_frame[IP_MAXPACKET];$/;"	m	struct:packetconfig	file:
fanout_id	udpreceive.c	/^static int fanout_id;$/;"	v	file:
fanout_type	udpreceive.c	/^static int fanout_type;$/;"	v	file:
fd	net_client.c	/^    int fd;$/;"	m	struct:_rxring	file:
fd	vmem/disk.c	/^	int fd;$/;"	m	struct:disk	file:
fd	vmem/page_table.h	/^    int fd;$/;"	m	struct:page_table
fill_mem	vmem/mem.c	/^void fill_mem(struct mem *r) {$/;"	f
fill_rmem	vmem/rmem.c	/^void fill_rmem(struct rmem *r) {$/;"	f
first_tpacket_hdr	udpreceive.c	/^    struct tpacket_hdr *first_tpacket_hdr;$/;"	m	struct:rcv_ring	typeref:struct:rcv_ring::tpacket_hdr	file:
framePage	vmem/page_table.c	/^int* framePage; \/\/ keeps track of which page is in a frame$/;"	v
frameState	vmem/page_table.c	/^int* frameState; \/\/ keeps track of how long a page has been in a frame$/;"	v
freeMem	server_lib.c	/^int freeMem(struct sockaddr_in6 *targetIP, struct in6_memaddr *ipv6Pointer) {$/;"	f
freeRemoteMem	client_lib.c	/^int freeRemoteMem(struct sockaddr_in6 *targetIP,  struct in6_memaddr *remoteAddr) {$/;"	f
gen_packet_info	udpsend.c	/^struct packetconfig *gen_packet_info(struct config *configstruct) {$/;"	f
gen_rdm_IPv6Target	client_lib.c	/^struct in6_addr *gen_rdm_IPv6Target() {$/;"	f
gen_rdm_bytestream	utils.c	/^unsigned char *gen_rdm_bytestream(size_t num_bytes) {$/;"	f
getIPv6FromPointer	server_lib.c	/^struct in6_addr getIPv6FromPointer(uint64_t pointer) {$/;"	f
getLine	utils.c	/^int getLine(char *prmpt, char *buff, size_t sz) {$/;"	f
getMem	server_lib.c	/^int getMem(struct sockaddr_in6 *targetIP, struct in6_memaddr *ipv6Pointer) {$/;"	f
getPointerFromIPv6	server_lib.c	/^uint64_t getPointerFromIPv6(struct in6_addr addr) {$/;"	f
getRemoteMem	client_lib.c	/^char *getRemoteMem(struct sockaddr_in6 *targetIP, struct in6_memaddr *remoteAddr) {$/;"	f
get_packet	udpreceive.c	/^struct tpacket_hdr *get_packet(struct rcv_ring *ring_p) {$/;"	f
get_packet_info	udpsend.c	/^struct packetconfig *get_packet_info() {$/;"	f
get_rcv_socket	udpreceive.c	/^int get_rcv_socket() {$/;"	f
get_send_socket	udpsend.c	/^int get_send_socket() {$/;"	f
getns	utils.h	/^static inline uint64_t getns(void)$/;"	f
handler	vmem/page_table.h	/^    page_fault_handler_t handler;$/;"	m	struct:page_table
hostList	client_lib.c	/^struct in6_addr *hostList;$/;"	v	typeref:struct:in6_addr
hosts	config.h	/^    struct in6_addr hosts[40];$/;"	m	struct:config	typeref:struct:config::in6_addr
ifindex	net_client.c	/^    int ifindex;$/;"	m	struct:_rxring	file:
ifname	net_client.c	/^const char *ifname;$/;"	v
ifr6_addr	config.c	/^    struct in6_addr ifr6_addr;$/;"	m	struct:in6_ifreq	typeref:struct:in6_ifreq::in6_addr	file:
ifr6_ifindex	config.c	/^    unsigned int ifr6_ifindex;$/;"	m	struct:in6_ifreq	file:
ifr6_prefixlen	config.c	/^    __u32 ifr6_prefixlen;$/;"	m	struct:in6_ifreq	file:
ifreq_offsetof	config.c	18;"	d	file:
in6_ifreq	config.c	/^struct in6_ifreq {$/;"	s	file:
in6_memaddr	udpcooked.h	/^struct in6_memaddr {$/;"	s
init_epoll	udpreceive.c	/^void init_epoll() {$/;"	f
init_packetsock	udpsend.c	/^int init_packetsock() {$/;"	f
init_packetsock_ring	udpsend.c	/^int init_packetsock_ring(int sd){$/;"	f
init_rcv_socket	udpreceive.c	/^struct sockaddr_in6 *init_rcv_socket(struct config *configstruct) {$/;"	f
init_rcv_socket_old	udpreceive.c	/^struct sockaddr_in6 *init_rcv_socket_old(struct config *configstruct) {$/;"	f
init_send_socket	udpsend.c	/^void init_send_socket(struct config *configstruct) {$/;"	f
init_send_socket_old	udpsend.c	/^void init_send_socket_old(struct config *configstruct) {$/;"	f
init_socket	udpreceive.c	/^int init_socket() {$/;"	f
init_virtual_memory	vmem/page_table.c	/^struct page_table *init_virtual_memory(int npages, int nframes, const char* system) {$/;"	f
interface	config.h	/^    char interface[20];$/;"	m	struct:config
interface_ep	udpreceive.c	/^static struct ep_interface interface_ep;$/;"	v	typeref:struct:ep_interface	file:
internal_fault_handler	vmem/page_table.c	/^static void internal_fault_handler( int signum, siginfo_t *info, void *context ) {$/;"	f	file:
iphdr	udpsend.c	/^    struct ip6_hdr iphdr;$/;"	m	struct:packetconfig	typeref:struct:packetconfig::ip6_hdr	file:
map	net_client.c	/^    uint8_t *map;$/;"	m	struct:_rxring	file:
map_ring	net_client.c	/^static int map_ring(rxring_t rx)$/;"	f	file:
map_sz	net_client.c	/^    size_t map_sz;$/;"	m	struct:_rxring	file:
mapped_memory_size	udpreceive.c	/^    int mapped_memory_size;$/;"	m	struct:rcv_ring	file:
mem	vmem/mem.c	/^struct mem {$/;"	s	file:
mem	vmem/page_table.c	/^struct mem* mem;$/;"	v	typeref:struct:mem
memList	vmem/mem.c	/^    struct u_int8 **memList;$/;"	m	struct:mem	typeref:struct:mem::u_int8	file:
memList	vmem/rmem.c	/^    struct in6_memaddr *memList;$/;"	m	struct:rmem	typeref:struct:rmem::in6_memaddr	file:
mem_H	vmem/mem.h	8;"	d
mem_allocate	vmem/mem.c	/^struct mem *mem_allocate(int nblocks) {$/;"	f
mem_blocks	vmem/mem.c	/^int mem_blocks(struct mem *r) {$/;"	f
mem_deallocate	vmem/mem.c	/^void mem_deallocate(struct mem *r) {$/;"	f
mem_read	vmem/mem.c	/^void mem_read(struct mem *r, int block, char *data) {$/;"	f
mem_write	vmem/mem.c	/^void mem_write(struct mem *r, int block, char *data) {$/;"	f
myConf	vmem/rmem.c	/^struct config myConf;$/;"	v	typeref:struct:config
my_port	udpreceive.c	/^    uint16_t my_port;$/;"	m	struct:ep_interface	file:
nblocks	vmem/disk.c	/^	int nblocks;$/;"	m	struct:disk	file:
nblocks	vmem/mem.c	/^    int nblocks;$/;"	m	struct:mem	file:
nblocks	vmem/rmem.c	/^    int nblocks;$/;"	m	struct:rmem	file:
next_packet	udpreceive.c	/^void next_packet(struct rcv_ring *ring_p) {$/;"	f
nframes	vmem/page_table.h	/^    int nframes;$/;"	m	struct:page_table
nhosts	client_lib.c	/^int nhosts;$/;"	v
npages	vmem/page_table.h	/^    int npages;$/;"	m	struct:page_table
nr_blocks	net_client.c	/^    unsigned int nr_blocks;$/;"	m	struct:_rxring	file:
num_hosts	config.h	/^    int num_hosts;$/;"	m	struct:config
packet_socket	net_client.c	/^static int packet_socket(rxring_t rx)$/;"	f	file:
packetconfig	udpsend.c	/^struct packetconfig {$/;"	s	file:
packetinfo	udpsend.c	/^static __thread struct packetconfig packetinfo;$/;"	v	typeref:struct:packetconfig	file:
paddr	udpcooked.h	/^    uint64_t paddr;$/;"	m	struct:in6_memaddr
pageFaults	vmem/page_table.c	/^int pageFaults = 0;$/;"	v
pageReads	vmem/page_table.c	/^int pageReads = 0;$/;"	v
pageWrites	vmem/page_table.c	/^int pageWrites = 0;$/;"	v
page_bits	vmem/page_table.h	/^    int *page_bits;$/;"	m	struct:page_table
page_fault_handler_disk	vmem/page_table.c	/^void page_fault_handler_disk( struct page_table *pt, int page) {$/;"	f
page_fault_handler_mem	vmem/page_table.c	/^void page_fault_handler_mem( struct page_table *pt, int page ) {$/;"	f
page_fault_handler_rmem	vmem/page_table.c	/^void page_fault_handler_rmem( struct page_table *pt, int page ) {$/;"	f
page_fault_handler_t	vmem/page_table.h	/^typedef void (*page_fault_handler_t) ( struct page_table *pt, int page );$/;"	t
page_mapping	vmem/page_table.h	/^    int *page_mapping;$/;"	m	struct:page_table
page_table	vmem/page_table.h	/^struct page_table {$/;"	s
page_table_create	vmem/page_table.c	/^struct page_table *page_table_create( int npages, int nframes, page_fault_handler_t handler ) {$/;"	f
page_table_delete	vmem/page_table.c	/^void page_table_delete(struct page_table *pt) {$/;"	f
page_table_flush	vmem/page_table.c	/^void page_table_flush(struct page_table *pt) {$/;"	f
page_table_get_entry	vmem/page_table.c	/^void page_table_get_entry( struct page_table *pt, int page, int *frame, int *bits ) {$/;"	f
page_table_get_nframes	vmem/page_table.c	/^int page_table_get_nframes( struct page_table *pt ) {$/;"	f
page_table_get_npages	vmem/page_table.c	/^int page_table_get_npages( struct page_table *pt ) {$/;"	f
page_table_get_physmem	vmem/page_table.c	/^char * page_table_get_physmem( struct page_table *pt ) {$/;"	f
page_table_get_virtmem	vmem/page_table.c	/^char * page_table_get_virtmem( struct page_table *pt ) {$/;"	f
page_table_print	vmem/page_table.c	/^void page_table_print( struct page_table *pt ) {$/;"	f
page_table_print_entry	vmem/page_table.c	/^void page_table_print_entry( struct page_table *pt, int page ) {$/;"	f
page_table_set_entry	vmem/page_table.c	/^void page_table_set_entry(struct page_table *pt, int page, int frame, int bits ) {$/;"	f
pagingSystem	vmem/page_table.c	/^const char* pagingSystem;$/;"	v
pfd	net_client.c	/^struct pollfd pfd;$/;"	v	typeref:struct:pollfd
physmem	vmem/page_table.c	/^char* physmem;$/;"	v
physmem	vmem/page_table.h	/^    char *physmem;$/;"	m	struct:page_table
printBytes	utils.c	/^int printBytes(char * receiveBuffer) {$/;"	f
printNBytes	utils.c	/^int printNBytes(void *receiveBuffer, int num) {$/;"	f
printSendLat	network.c	/^void printSendLat() {$/;"	f
print_addrInfo	utils.c	/^int print_addrInfo(struct addrinfo *result) {$/;"	f
print_debug	utils.h	17;"	d
print_page_faults	vmem/page_table.c	/^void print_page_faults() {$/;"	f
priv	net_client.c	/^struct priv {$/;"	s	file:
r_idx	net_client.c	/^    unsigned int r_idx;$/;"	m	struct:_rxring	file:
rcvLat	network.c	/^static __thread uint64_t rcvLat = 0;$/;"	v	file:
rcv_calls	network.c	/^static __thread uint64_t rcv_calls = 0;$/;"	v	file:
rcv_ring	udpreceive.c	/^struct rcv_ring {$/;"	s	file:
rcv_udp6_raw	network.c	/^int rcv_udp6_raw(char *receiveBuffer, int msgBlockSize, struct sockaddr_in6 *targetIP, struct in6_memaddr *remoteAddr) {$/;"	f
rcv_udp6_raw_id	network.c	/^int rcv_udp6_raw_id(char *receiveBuffer, int msgBlockSize, struct sockaddr_in6 *targetIP, struct in6_memaddr *remoteAddr) {$/;"	f
receiveBuffer	client_lib.c	/^static __thread char receiveBuffer[BLOCK_SIZE];$/;"	v	file:
ring	udpreceive.c	/^static __thread struct rcv_ring ring;$/;"	v	typeref:struct:rcv_ring	file:
ring	udpsend.c	/^static __thread char *ring;$/;"	v	file:
ring_offset	udpsend.c	/^static __thread int ring_offset = 0;$/;"	v	file:
rmem	vmem/page_table.c	/^struct rmem* rmem;$/;"	v	typeref:struct:rmem
rmem	vmem/rmem.c	/^struct rmem {$/;"	s	file:
rmem_allocate	vmem/rmem.c	/^struct rmem *rmem_allocate(int nblocks) {$/;"	f
rmem_blocks	vmem/rmem.c	/^int rmem_blocks(struct rmem *r) {$/;"	f
rmem_deallocate	vmem/rmem.c	/^void rmem_deallocate(struct rmem *r) {$/;"	f
rmem_init_sockets	vmem/rmem.c	/^void rmem_init_sockets(struct rmem *r) {$/;"	f
rmem_read	vmem/rmem.c	/^void rmem_read( struct rmem *r, int block, char *data ) {$/;"	f
rmem_write	vmem/rmem.c	/^void rmem_write(struct rmem *r, int block, char *data ) {$/;"	f
rx_cb_t	net_client.c	/^typedef int (*rx_cb_t)(void *u, const uint8_t *buf, size_t len);$/;"	t	file:
rx_client_init_socket	net_client.c	/^struct sockaddr_in6 *rx_client_init_socket(struct config *configstruct) {$/;"	f
rx_global	net_client.c	/^static rxring_t rx_global;$/;"	v	file:
rx_ring	net_client.c	/^static int rx_ring(rxring_t rx)$/;"	f	file:
rxring_cancel_mainloop	net_client.c	/^void rxring_cancel_mainloop(rxring_t rx)$/;"	f
rxring_fanout_hash	net_client.c	/^int rxring_fanout_hash(rxring_t rx, uint16_t id)$/;"	f
rxring_free	net_client.c	/^void rxring_free(rxring_t rx)$/;"	f
rxring_init	net_client.c	/^rxring_t rxring_init()$/;"	f
rxring_mainloop	net_client.c	/^int rxring_mainloop(char *receiveBuffer, int msgBlockSize, struct sockaddr_in6 *targetIP, struct in6_memaddr *remoteAddr, int server){$/;"	f
rxring_t	net_client.c	/^typedef struct _rxring *rxring_t;$/;"	t	typeref:struct:_rxring	file:
sd_rcv	udpreceive.c	/^static __thread int sd_rcv;$/;"	v	file:
sd_send	udpsend.c	/^static __thread int sd_send;$/;"	v	file:
sendBuffer	client_lib.c	/^static __thread char sendBuffer[BLOCK_SIZE];$/;"	v	file:
sendBuffer	server_lib.c	/^static char sendBuffer[BLOCK_SIZE];$/;"	v	file:
sendLat	network.c	/^static __thread uint64_t sendLat = 0;$/;"	v	file:
send_calls	network.c	/^static __thread uint64_t send_calls = 0;$/;"	v	file:
send_id_udp6_raw	network.c	/^struct in6_memaddr *send_id_udp6_raw(char *sendBuffer, int msgBlockSize, struct sockaddr_in6 *targetIP, struct in6_memaddr *remoteAddr) {$/;"	f
send_mmap	udpsend.c	/^int send_mmap(unsigned const char *pkt, int pktlen) {$/;"	f
send_udp6_raw	network.c	/^int send_udp6_raw(char *sendBuffer, int msgBlockSize, struct sockaddr_in6 *targetIP, struct in6_memaddr *remoteAddr) {$/;"	f
send_udp_raw	network.c	/^int send_udp_raw(char *sendBuffer, int msgBlockSize, struct sockaddr_in6 *targetIP) {$/;"	f
server_port	config.h	/^    char server_port[5];$/;"	m	struct:config
set_host_list	client_lib.c	/^void set_host_list(struct in6_addr *host_addrs, int num_hosts) {$/;"	f
set_interface_ip	config.c	/^int set_interface_ip(struct config *configstruct) {$/;"	f
set_source_port	config.c	/^int set_source_port(struct config *configstruct, int isServer, char *src_port) {$/;"	f
set_thread_id_rx	udpreceive.c	/^void set_thread_id_rx(int id) {$/;"	f
set_thread_id_sd	udpsend.c	/^void set_thread_id_sd(int id) {$/;"	f
set_v3	net_client.c	/^static int set_v3(rxring_t rx)$/;"	f	file:
set_vmem_config	vmem/page_table.c	/^void set_vmem_config(char *filename) {$/;"	f
setup_packet_mmap	udpreceive.c	/^int setup_packet_mmap() {$/;"	f
sll	net_client.c	/^struct sockaddr_ll sll;$/;"	v	typeref:struct:sockaddr_ll
src_addr	config.h	/^    struct in6_addr src_addr;$/;"	m	struct:config	typeref:struct:config::in6_addr
src_port	config.h	/^    uint16_t src_port;$/;"	m	struct:config
subid	udpcooked.h	/^    uint16_t subid;$/;"	m	struct:in6_memaddr
targetIP	vmem/rmem.c	/^    struct sockaddr_in6 *targetIP;$/;"	m	struct:rmem	typeref:struct:rmem::sockaddr_in6	file:
test	net_client.c	/^    int test;$/;"	m	struct:priv	file:
the_page_table	vmem/page_table.c	/^struct page_table *the_page_table = 0;$/;"	v	typeref:struct:page_table
thread_id	udpreceive.c	/^static __thread int thread_id;$/;"	v	file:
thread_id	udpsend.c	/^static __thread int thread_id;$/;"	v	file:
tpacket_i	udpreceive.c	/^    int tpacket_i;$/;"	m	struct:rcv_ring	file:
tpacket_req	udpreceive.c	/^    struct tpacket_req tpacket_req;$/;"	m	struct:rcv_ring	typeref:struct:rcv_ring::tpacket_req	file:
udp6_checksum	udpsend.c	/^uint16_t udp6_checksum (struct ip6_hdr *iphdr, struct udphdr *udphdr, uint8_t *payload, int payloadlen) {$/;"	f
udphdr	udpsend.c	/^    struct udphdr udphdr;$/;"	m	struct:packetconfig	typeref:struct:packetconfig::udphdr	file:
user	net_client.c	/^    void *user;$/;"	m	struct:_rxring	file:
varadr_char	server_lib.c	/^char *varadr_char[1000];$/;"	v
virtmem	vmem/page_table.h	/^    char *virtmem;$/;"	m	struct:page_table
wildcard	udpcooked.h	/^    uint32_t wildcard;$/;"	m	struct:in6_memaddr
writeMem	server_lib.c	/^int writeMem(char *receiveBuffer, struct sockaddr_in6 *targetIP, struct in6_memaddr *ipv6Pointer) {$/;"	f
writeRemoteMem	client_lib.c	/^int writeRemoteMem(struct sockaddr_in6 *targetIP, char *payload, struct in6_memaddr *remoteAddr) {$/;"	f
